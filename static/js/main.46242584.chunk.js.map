{"version":3,"sources":["components/Name.js","components/Bio.js","components/Species.js","components/Homeworld.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Name","props","className","loading","react_default","a","createElement","name","Bio","info1","value1","info2","value2","info3","value3","Species","species","Homeworld","homeworld","Card","state","character","charLoading","speciesLoading","homeworldLoading","_this2","this","fetch","concat","num","then","results","json","data","setState","oldCharacter","oldSpecies","components_Name","components_Bio","height","mass","birth_year","hair_color","eye_color","skin_color","components_Species","components_Homeworld","React","Component","App","random","Math","floor","components_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46242584.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Name = props => {\n  let className = props.loading ? \"loading\" : \"loaded\";\n\n  return (\n    <div className={className}>\n      <h1> {props.name} </h1>\n    </div>\n  );\n};\n\nexport default Name;\n","import React from \"react\";\n\nconst Bio = props => {\n  let className = props.loading ? \"loading\" : \"loaded\";\n  return (\n    <div className=\"bio\">\n      <h3 className={className}>\n        {props.info1}\n        {props.value1}\n      </h3>\n      <br />\n      <h3 className={className}>\n        {props.info2}\n        {props.value2}\n      </h3>\n      <br />\n      <h3 className={className}>\n        {props.info3}\n        {props.value3}\n      </h3>\n    </div>\n  );\n};\n\nexport default Bio;\n","import React from \"react\";\n\nconst Species = props => {\n  let className = props.loading ? \"loading\" : \"loaded\";\n  return (\n    <div>\n      <h3 className={className}>{\"Species: \" + props.species}</h3>\n    </div>\n  );\n};\n\nexport default Species;\n","import React from \"react\";\n\nconst Homeworld = props => {\n  let className = props.loading ? \"loading\" : \"loaded\";\n  return (\n    <div>\n      <h3 className={className}>{\"Homeworld: \" + props.homeworld}</h3>\n    </div>\n  );\n};\n\nexport default Homeworld;\n","import React from \"react\";\nimport Name from \"./Name\";\nimport Bio from \"./Bio\";\nimport Species from \"./Species\";\nimport Homeworld from \"./Homeworld\";\n\nclass Card extends React.Component {\n  state = {\n    character: {},\n    species: \"\",\n    homeworld: \"\",\n    charLoading: true,\n    speciesLoading: true,\n    homeworldLoading: true\n  };\n  componentDidMount(props) {\n    fetch(`https://swapi.co/api/people/${this.props.num}/`)\n      .then(results => {\n        // console.log(results);\n        return results.json();\n      })\n      .then(data => {\n        this.setState({\n          character: data,\n          charLoading: false,\n          speciesLoading: true,\n          homeworldLoading: true\n        });\n        fetch(this.state.character.species)\n          .then(results => {\n            return results.json();\n          })\n          .then(data => {\n            // console.log(data);\n            let oldCharacter = this.state.character;\n            // console.log(oldCharacter);\n            this.setState({\n              character: oldCharacter,\n              species: data.name,\n              charLoading: false,\n              speciesLoading: false,\n              homeworldLoading: true\n            });\n            fetch(this.state.character.homeworld)\n              .then(results => {\n                return results.json();\n              })\n              .then(data => {\n                // console.log(data);\n                let oldCharacter = this.state.character;\n                let oldSpecies = this.state.species;\n                // console.log(oldCharacter);\n                this.setState({\n                  character: oldCharacter,\n                  species: oldSpecies,\n                  homeworld: data.name,\n                  charLoading: false,\n                  speciesLoading: false,\n                  homeworldLoading: false\n                });\n              });\n          });\n      });\n  }\n  render() {\n    return (\n      <div className=\"card\">\n        <Name\n          loading={this.state.charLoading}\n          name={this.state.character.name}\n        />\n        <Bio\n          loading={this.state.charLoading}\n          info1=\"Height: \"\n          value1={this.state.character.height}\n          info2=\"Weight: \"\n          value2={this.state.character.mass}\n          info3=\"Birth Year: \"\n          value3={this.state.character.birth_year}\n        />\n        <Bio\n          loading={this.state.charLoading}\n          info1=\"Hair Colour: \"\n          value1={this.state.character.hair_color}\n          info2=\"Eye Colour: \"\n          value2={this.state.character.eye_color}\n          info3=\"Skin Colour: \"\n          value3={this.state.character.skin_color}\n        />\n        <Species\n          loading={this.state.speciesLoading}\n          species={this.state.species}\n        />\n        <Homeworld\n          loading={this.state.homeworldLoading}\n          homeworld={this.state.homeworld}\n        />\n\n        {/* <Films /> */}\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./components/Card\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  random = () => {\n    return Math.floor(Math.random() * 89);\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"heading\">\n          <h1>Random Star Wars Characters</h1>\n        </div>\n        <div className=\"cards\">\n          <Card num={this.random()} />\n          <Card num={this.random()} />\n          <Card num={this.random()} />\n          <Card num={this.random()} />\n          <Card num={this.random()} />\n          <Card num={this.random()} />\n          <Card num={this.random()} />\n          <Card num={this.random()} />\n          <Card num={this.random()} />\n          <Card num={this.random()} />\n          <Card num={this.random()} />\n          <Card num={this.random()} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}